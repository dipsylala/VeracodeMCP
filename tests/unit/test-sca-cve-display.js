#!/usr/bin/env node

/**
 * Test SCA CVE and Component Display Enhancement
 * 
 * This example demonstrates how SCA findings now emphasize CVE identifiers 
 * and component filenames for better LLM consumption and vulnerability tracking.
 * 
 * Usage: node examples/test-sca-cve-display.js [application-name]
 */

import { VeracodeDirectClient } from '../../build/test-utils/veracode-direct-client.js';

async function testSCACVEDisplay() {
  try {
    // Initialize MCP client
    const client = new VeracodeDirectClient();

    // Test application - use first argument or default
    const appName = process.argv[2] || 'NodeGoat';

    console.log('üîç Testing SCA CVE and Component Display Enhancement');
    console.log(`üì± Application: ${appName}`);
    console.log('='.repeat(80));

    // Get SCA results to test CVE and component emphasis
    console.log('\nüìä Getting SCA Results with CVE Emphasis...');
    const scaResult = await client.callTool('get-sca-results', {
      application: appName,
      max_results: 5 // Small sample for testing
    });

    if (scaResult.success && scaResult.data.detailed_findings.length > 0) {
      console.log('\n‚úÖ SCA Findings Retrieved Successfully');
      console.log(`üìà Total Findings: ${scaResult.data.detailed_findings.length}`);

      // Display first finding to show enhanced CVE/component fields
      const firstFinding = scaResult.data.detailed_findings[0];

      console.log('\nüéØ First Finding - Enhanced CVE/Component Fields:');
      console.log('‚îÄ'.repeat(60));
      console.log(`CVE: ${firstFinding.cve_id || 'N/A'}`);
      console.log(`Vulnerability ID: ${firstFinding.vulnerability_id || 'N/A'}`);
      console.log(`Component Filename: ${firstFinding.component_filename || 'N/A'}`);
      console.log(`Vulnerable File: ${firstFinding.vulnerable_file || 'N/A'}`);
      console.log(`File Location: ${firstFinding.file_location || 'N/A'}`);
      console.log(`CVSS Score: ${firstFinding.cvss_score || 'N/A'}`);
      console.log(`Severity Level: ${firstFinding.severity_level || 'N/A'}`);

      if (firstFinding.tracking_info) {
        console.log('\nüìã Tracking Information:');
        console.log(`  Primary CVE: ${firstFinding.tracking_info.primary_cve || 'N/A'}`);
        console.log(`  Component Name: ${firstFinding.tracking_info.component_name || 'N/A'}`);
        console.log(`  Full Path: ${firstFinding.tracking_info.full_path || 'N/A'}`);
        console.log(`  Remediation: ${firstFinding.tracking_info.remediation_guidance || 'N/A'}`);
      }

      // Show top vulnerabilities with enhanced fields
      if (scaResult.data.analysis.topVulnerabilities.length > 0) {
        console.log('\nüî• Top Vulnerabilities - Enhanced Display:');
        console.log('‚îÄ'.repeat(60));

        scaResult.data.analysis.topVulnerabilities.slice(0, 3).forEach((vuln, index) => {
          console.log(`\n${index + 1}. ${vuln.cve_id || vuln.cve} (CVSS: ${vuln.cvss_score || vuln.cvss})`);
          console.log(`   Component: ${vuln.component_filename || vuln.component}`);
          console.log(`   Severity: ${vuln.severity_level || vuln.severity}`);
          console.log(`   Exploitable: ${vuln.exploitable ? '‚ö†Ô∏è  YES' : '‚úÖ No'}`);
          if (vuln.tracking_info) {
            console.log(`   Tracking ID: ${vuln.tracking_info.primary_id}`);
          }
        });
      }

    } else if (scaResult.success && scaResult.data.detailed_findings.length === 0) {
      console.log('\n‚úÖ SCA Results Retrieved - No Findings');
      console.log('üìù This application has no SCA findings to display');

    } else {
      console.log('\n‚ùå Failed to get SCA results');
      console.log(`Error: ${scaResult.error}`);
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ SCA CVE and Component Display Test Complete');
    console.log('üí° CVE identifiers and component filenames are now emphasized for LLM consumption');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

// Run the test
testSCACVEDisplay().catch(console.error);
